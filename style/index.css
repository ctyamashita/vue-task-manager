@import 'components/card.css';

:root {
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  --green: #b0c97d;
  --lightgray: #eaeaea;
}

ul {
  padding: 0;
}

pre, input[type=text] {
  color: rgba(0, 0, 0, .7);
}

body {
  margin: 0;
  padding: 0;
  background-color: darksalmon;
}

#app {
  display: grid;
  gap: .5rem;
}

#app > * {
  margin: 0 auto;
  width: calc(100% - 1rem);
}

input[type=text] {
  width: -webkit-fill-available;
  border: none;
  border-bottom: solid 2px;
}

input[type=checkbox] {
  border: 0;
}

/* Customize the label (the container) */
.checkbox-container {
  display: block;
  position: relative;
  padding-left: 35px;
  margin-bottom: 12px;
  cursor: pointer;
  font-size: 22px;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

/* Hide the browser's default checkbox */
.checkbox-container input {
  position: absolute;
  opacity: 0;
  cursor: pointer;
  height: 0;
  width: 0;
}

/* Create a custom checkbox */
.checkmark {
  position: absolute;
  top: 0;
  left: 0;
  height: 30px;
  width: 30px;
  border-radius: 50%;
  background-color: white;
  box-shadow: inset 0px 0px 0px 2px gray;
}

/* On mouse-over, add a grey background color */
.checkbox-container:hover input ~ .checkmark {
  background: radial-gradient(orange 50%, white 50%);
}

/* When the checkbox is checked, add a blue background */
.checkbox-container input:checked ~ .checkmark {
  opacity: .5;
  background-color: limegreen;
  box-shadow: inset 0 0 0 2px darkolivegreen;
}

.checkbox-container input:focus ~ .checkmark {
  background: radial-gradient(orange 50%, white 50%);
  opacity: 1;
}

/* Create the checkmark/indicator (hidden when not checked) */
.checkmark:after {
  content: "";
  position: absolute;
  display: none;
}

/* Show the checkmark when checked */
.checkbox-container input:checked ~ .checkmark:after {
  display: block;
}

/* Style the checkmark/indicator */
.checkbox-container .checkmark:after {
  left: 11px;
  top: 7px;
  width: 5px;
  height: 10px;
  border: solid white;
  border-width: 0 3px 3px 0;
  -webkit-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  transform: rotate(45deg);
}

.lists {
  display: grid;
  gap: .5rem;
  margin: .5rem 0;
}

@media (min-width: 900px) {
  .lists {
    grid-template-columns: 1fr 1fr;
  }
}
@media (min-width: 1200px) {
  .lists {
    grid-template-columns: 1fr 1fr 1fr;
  }
}

.list {
  background: white;
  padding: .5rem;
  display: flex;
  /* gap: .5rem; */
  flex-direction: column;
  border-radius: .75rem;
  height: fit-content;
}

.all-done {
  background: var(--green);
}

.all-done .add {
  border-color: darkolivegreen;
  color: darkolivegreen;
}

.all-done .add:hover,
.all-done .add:focus {
  background-color: darkolivegreen;
  color: white;
  border-color: transparent;
}

.all-done:has(.expanded:not(:checked)) .add,
.all-done .tasks,
.expanded {
  display: none;
}

.all-done:has(.expanded:checked) .tasks {
  display: grid;
}

.all-done:has(.expanded:checked) {
  animation: expand-container .5s forwards;
}

.all-done:has(.expanded:checked) .tasks-container {
  animation: expand .5s forwards;
}

.list-title-container {
  display: flex;
  align-items: center;
  /* border-bottom: solid 2px; */
  position: relative;
}

.list-title-container .counter {
  position: absolute;
  right: -0.5rem;
  font-weight: 100;
  /* letter-spacing: .25rem; */
  background: lightsteelblue;
  padding: .5rem .75rem;
  border-radius: 2rem 0 0 2rem;
}

.all-done .list-title-container .counter {
  background-color: darkolivegreen;
  color: var(--green);
  letter-spacing: normal;
}

.list-title-container input[type=text] {
  border-bottom: none;
}

@keyframes expand {
  0% { transform: translateY(-50%) scaleY(0); }
  100% { transform: translateY(0) scaleY(1); }
}

@keyframes expand-container {
  0% { height: 114.5px; }
  100% { height: calc(100% - 1rem); }
}